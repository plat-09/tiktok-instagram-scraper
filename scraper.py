# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from playwright.sync_api import sync_playwright
import requests
import json
import time
import re
import os
from urllib.parse import urlparse
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ .env –∏–ª–∏ –±–µ—Ä—É—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "–õ–∏—Å—Ç1")
CREDS_FILE = os.getenv("GOOGLE_CREDS_FILE", "creds.json")
AUTH_FILE = os.getenv("INSTAGRAM_AUTH_FILE", "auth.json")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cookies –∏–∑ auth.json
def load_cookie_string():
    try:
        with open(AUTH_FILE, "r") as f:
            raw = json.load(f)
            cookies = raw["cookies"]
            return "; ".join([f"{c['name']}={c['value']}" for c in cookies])
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å auth.json: {e}")
        return ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ TikTok
def resolve_redirect(url):
    try:
        r = requests.get(url, allow_redirects=True, timeout=10)
        return r.url
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É: {e}")
        return url

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
def shorten_url(url):
    parsed = urlparse(url)
    if "instagram.com" in parsed.netloc and "/reel/" in parsed.path:
        match = re.search(r"/reel/([a-zA-Z0-9_-]+)", url)
        if match:
            return f"https://www.instagram.com/reel/{match.group(1)}/"
    elif "tiktok.com" in parsed.netloc:
        match = re.search(r"/video/(\d+)", url)
        if match:
            return f"https://www.tiktok.com{parsed.path}"
    return url

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Instagram —á–µ—Ä–µ–∑ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API
def get_instagram_stats(shortcode, cookies):
    url = f"https://i.instagram.com/api/v1/media/shortcode/{shortcode}/info/"
    headers = {
        "User-Agent": "Instagram 155.0.0.37.107",
        "X-IG-App-ID": "936619743392459",
        "Cookie": cookies
    }
    try:
        res = requests.get(url, headers=headers)
        if res.status_code == 200:
            data = res.json()
            item = data["items"][0]
            return str(item["like_count"]), str(item.get("play_count", "")), str(item["comment_count"])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Instagram API {res.status_code}: {res.text}")
            return "", "", ""
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Instagram API: {e}")
        return "", "", ""

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
def process_links():
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    data = sheet.get_all_values()
    cookie_string = load_cookie_string()

    # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Playwright
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()

        for row_num, row in enumerate(data[1:], start=2):
            try:
                url = row[0] if len(row) > 0 else ""
                if not url or (len(row) > 9 and row[9]):
                    continue

                print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {row_num}: {url}")
                url = shorten_url(resolve_redirect(url))

                likes, views, comments = "", "", ""

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ TikTok —Å—Å—ã–ª–æ–∫
                if "tiktok.com" in url:
                    page.goto(url, timeout=60000)
                    time.sleep(3)
                    html = page.content()

                    likes = re.search(r'"diggCount":(\d+)', html)
                    views = re.search(r'"playCount":(\d+)', html)
                    comments = re.search(r'"commentCount":(\d+)', html)

                    likes = likes.group(1) if likes else ""
                    views = views.group(1) if views else ""
                    comments = comments.group(1) if comments else ""

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Instagram Reels
                elif "instagram.com/reel/" in url:
                    shortcode_match = re.search(r"/reel/([a-zA-Z0-9_-]+)/", url)
                    if shortcode_match:
                        shortcode = shortcode_match.group(1)
                        likes, views, comments = get_instagram_stats(shortcode, cookie_string)

                # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É
                if likes or views or comments:
                    sheet.update(range_name=f"J{row_num}", values=[[likes]])
                    sheet.update(range_name=f"K{row_num}", values=[[views]])
                    sheet.update(range_name=f"L{row_num}", values=[[comments]])
                    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_num}: ‚ù§Ô∏è {likes} | üëÅ {views} | üí¨ {comments}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_num}: {e}")

        browser.close()


def main_loop():
    while True:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã...")
        try:
            process_links()
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        time.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    main_loop()